import { createClient } from '@supabase/supabase-js';

// Script para verificar dados de tipo_alerta no banco
// Execute: npx tsx verify_tipo_alerta.ts

const supabaseUrl = 'https://yrpnbomhgacvovzlhbxv.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlycG5ib21oZ2Fjdm92emxoYnh2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjYwNzU4MjEsImV4cCI6MjA0MTY1MTgyMX0.PjR4gWaS5Kcml2VKTIQ7pFp9pYL0JhdbXJhEplxW4lM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarTipoAlerta() {
  try {
    console.log('üîç Verificando dados de tipo_alerta...');
    
    // 1. Buscar todos os valores √∫nicos de tipo_alerta
    const { data: todosOsValores, error: errorTodos } = await supabase
      .from('contratos_vivo')
      .select('tipo_alerta')
      .not('tipo_alerta', 'is', null);
    
    if (errorTodos) {
      console.error('‚ùå Erro ao buscar valores:', errorTodos);
      return;
    }
    
    // Valores √∫nicos
    const valoresUnicos = [...new Set(todosOsValores.map(item => item.tipo_alerta))];
    console.log('üìä Valores √∫nicos encontrados:');
    valoresUnicos.forEach(valor => console.log(`  - "${valor}"`));
    
    // 2. Contagem por valor
    const contagem = {};
    todosOsValores.forEach(item => {
      const valor = item.tipo_alerta;
      contagem[valor] = (contagem[valor] || 0) + 1;
    });
    
    console.log('\nüìà Contagem por valor:');
    Object.entries(contagem).forEach(([valor, count]) => {
      console.log(`  "${valor}": ${count} registros`);
    });
    
    // 3. Verificar especificamente os valores problem√°ticos
    const problematicos = ['Cl√°usulas contradit√≥rias', 'Obrigatoriedades legais'];
    console.log('\nüîç Verificando valores problem√°ticos:');
    
    for (const valor of problematicos) {
      const { data: resultados, error } = await supabase
        .from('contratos_vivo')
        .select('id, numero_contrato, tipo_alerta')
        .eq('tipo_alerta', valor);
      
      if (error) {
        console.error(`‚ùå Erro ao buscar "${valor}":`, error);
        continue;
      }
      
      console.log(`\n"${valor}": ${resultados.length} registros encontrados`);
      if (resultados.length > 0) {
        console.log('Exemplos:');
        resultados.slice(0, 3).forEach(reg => {
          console.log(`  - ID: ${reg.id}, Contrato: ${reg.numero_contrato}, Tipo: "${reg.tipo_alerta}"`);
        });
      }
    }
    
    // 4. Verificar varia√ß√µes com caracteres especiais
    console.log('\nüîç Verificando poss√≠veis varia√ß√µes:');
    const variacoes = [
      'Clausulas Contradit√≥rias',
      'Clausulas contraditorias', 
      'Cl√°usulas Contradit√≥rias',
      'clausulas contradit√≥rias',
      'Obrigatoriedades Legais',
      'obrigatoriedades legais',
      'Obrigatoriedades legais'
    ];
    
    for (const variacao of variacoes) {
      const { data: resultados, error } = await supabase
        .from('contratos_vivo')
        .select('tipo_alerta')
        .eq('tipo_alerta', variacao);
      
      if (!error && resultados.length > 0) {
        console.log(`‚úÖ Encontrada varia√ß√£o: "${variacao}" (${resultados.length} registros)`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

verificarTipoAlerta();